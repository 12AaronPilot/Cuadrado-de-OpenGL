#version 330
uniform mat4 viewMatrix, projMatrix;
uniform vec3 lightPos;

in vec3 in_Position;
in vec2 in_UV;
in vec3 in_Normal;
in vec3 in_Tangent;
in vec3 in_Binormal;

out VERTIOUT {
    vec3 position;
		vec2 uv;
		vec3 normal;
} verticeOut;

out vec3 LightDirection_tangentspace;

void main(void)
{
      gl_Position = projMatrix * viewMatrix * vec4(in_Position, 1.0);
			vec3 vertice_cameraSpace = (viewMatrix * vec4(in_Position, 1.0)).xyz;

			//mat3 MV3x3 = mat3(viewMatrix);
			//vec3 vertexTangent_cameraspace = MV3x3 * in_Tangent;
			//vec3 vertexBinormal_cameraspace = MV3x3 * in_Binormal;
			//vec3 vertexNormal_cameraspace = MV3x3 * in_Normal;
			//
			//mat3 TBN = transpose(mat3(
			//	vertexTangent_cameraspace,
			//	vertexBinormal_cameraspace,
			//	vertexNormal_cameraspace	
			//));

			//LightDirection_tangentspace = TBN * LightDirection_cameraspace;

			vec3 LightPosition_cameraspace = (viewMatrix * vec4(lightPos,1)).xyz;
			vec3 LightDirection_cameraspace = normalize(LightPosition_cameraspace - vertice_cameraSpace);// LightPosition_cameraspace + EyeDirection_cameraspace;
			
			LightDirection_tangentspace = normalize(LightDirection_cameraspace);

			verticeOut.position = gl_Position.xyz;
			verticeOut.uv = in_UV;
			verticeOut.normal = in_Normal;
}