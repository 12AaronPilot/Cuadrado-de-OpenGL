#version 330
uniform mat4 worldMatrix;
uniform mat4 viewMatrix, projMatrix;

uniform vec3 pointLight;
uniform vec3 ambient;

uniform float Kd, Ks, Ka;
uniform float n_specular;

uniform vec3 lightPos;
uniform vec3 eyePosition;

in vec3 in_Position;
in vec3 in_Normal;
out vec3 ex_Color;

void main(void)
{
	gl_Position = projMatrix * viewMatrix * worldMatrix * vec4(in_Position, 1.0);
	vec3 Pview =  in_Position.xyz;//vec3(gl_ModelViewMatrix * gl_Vertex);

	vec3 ambientCon = ambient * Ka;
	vec3 L = normalize(lightPos - Pview);
	vec3 diffuseCon = Kd * pointLight * max(dot(in_Normal, L), 0);

	vec3 V = normalize(eyePosition - Pview);
	vec3 H = normalize(L + V);
	//vec3 specularCon = Ks * pointLight * pow(max(dot(in_Normal, H), 0), n_specular);
	vec3 specularCon = Ks * vec3(1.0,1.0,1.0) * pow(max(dot(in_Normal, H), 0), n_specular);

	if(length(diffuseCon) == 0)
		specularCon = vec3(0.0, 0.0, 0.0);

	ex_Color = ambientCon + diffuseCon + specularCon;
}